#
# OpenWolf CMakeLists.txt
#
# cmake required (http://www.cmake.org/)
#

cmake_minimum_required( VERSION 2.8 )

if( POLICY CMP0017 )
  cmake_policy( SET CMP0017 NEW )
endif()

include( CMakeDependentOption )
 
# This line has to appear before 'PROJECT' in order to be able to disable incremental linking
set( MSVC_INCREMENTAL_DEFAULT ON )

set( CMAKE_BUILD_TYPE Release CACHE STRING "Build configuration (Debug, Release, RelWithDebInfo, MinSizeRel)" )

project( OpenWolf C CXX ASM )

if( MSVC )
  set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /arch:SSE /fp:precise /Oy" )
else()
  set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2 -pipe" )
  set( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g" )
  set( CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -DNDEBUG -Os" )
  set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DNDEBUG -O3 -ffast-math -fomit-frame-pointer -fno-strict-aliasing" )
  set( CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -DNDEBUG -O3 -ffast-math -fomit-frame-pointer -fno-strict-aliasing -g" )
endif()

set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}" )
set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG}" )
set( CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} ${CMAKE_C_FLAGS_MINSIZEREL}" )
set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}" )
set( CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${CMAKE_C_FLAGS_RELWITHDEBINFO}" )
set( CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER} )
set( CMAKE_ASM_COMPILE_OBJECT ${CMAKE_C_COMPILE_OBJECT} )
set( CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "" ) # Need this to get rid of -rdynamic linker flag set by default by cmake
set( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" )

# Options
option( BUILD_CLIENT                   "Build OpenWolf client"                                 ON  )
option( BUILD_OLD_RENDERER             "Build old renderer library"                            OFF )
option( BUILD_NEW_RENDERER             "Build new renderer library"                            ON  )
option( BUILD_SERVER                   "Build OpenWolfded server"                              OFF )
option( BUILD_AUTOUPDATE_SERVER        "Build OpenWolf AutoUpdate server"                      OFF )
option( BUILD_GAME_SO_ET               "Build game logic shared libraries for ET"              OFF )
option( BUILD_GAME_SO_BASE             "Build game logic shared libraries for Tremulous 1.1.0" OFF )
option( BUILD_MASTER                   "Build master server"                                   ON  )
option( BUILD_OWMAP                    "Build Mapping tool"                                    ON  )
option( USE_OPENAL                     "Use OpenAL"                                            OFF )
 if( USE_OPENAL )
  option( USE_OPENAL_DLOPEN            "Use dlopen to load OpenAL"                             OFF )
 endif( )
option( USE_CPUINFO                    "Use CPUInfo (if compilation fails, then disable this)" ON  )
option( USE_CURSES                     "Use the curses console"                                ON  )
option( USE_CODEC_VORBIS               "Compile with support for Vorbis"                       ON  )
if( USE_CODEC_VORBIS )
  option( USE_CIN_THEORA               "Compile with support for Theora"                       ON  )
endif()
option( USE_GLSL_OPTIMIZER             "Compile with GLSL Optimizer"                           OFF )
option( USE_MUMBLE                     "Compile with support for Mumble"                       ON  )
option( USE_PHYSICS                    "Compile with Newton Physics"                           ON  )
option( USE_WEBP                       "Compile with WebP loader"                              OFF )
option( USE_MYSQL                      "Compile with MYSQL support"                            ON  )
option( USE_VOIP                       "Compile with VOIP support"                             ON  )
if( USE_VOIP )
  option( USE_INTERNAL_SPEEX           "Use internal Speex"                                    OFF )
endif()
option( USE_CIN_XVID                   "Encode videos with XViD"                               ON  )
option( USE_INTERNAL_CRYPTO            "Use internal Crypto (Nettle)"                          OFF )
option( NO_UNTRUSTED_PLUGINS           "Don't load native plugins from the user dir"           ON  )

# Package info
set( CPACK_PACKAGE_DESCRIPTION_SUMMARY "OpenWolf client" )
set( CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.txt" )
set( CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/GPL.txt" )
include( CPack )

set( MOUNT_DIR ${CMAKE_SOURCE_DIR}/src )
set( GAME_DIR ${CMAKE_SOURCE_DIR}/src/gamelogic/etmain/src )
set( BASE_DIR ${CMAKE_SOURCE_DIR}/src/gamelogic/base/src )
set( LIB_DIR ${CMAKE_SOURCE_DIR}/src/libs )

find_package( PkgConfig )

if( WIN32 )
  add_definitions( -D_CRT_SECURE_NO_WARNINGS )
endif()

set( CONSOLE "tty" )

# Determine platform
if( WIN32 )
  set( PLATFORM "win32" )
  set( CONSOLE "win32" )
elseif( UNIX )
  if( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
    add_definitions( -DMACOS_X -DMACOS_X_ACCELERATION_HACK -D USE_FILE32API -DMACOS_X_CURSOR_HACK )
  endif()
  set( PLATFORM "unix" )
endif()

# Determine arch
if( ${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64" )
  set( BUILD_ARCH "x86_64" )
elseif( ${CMAKE_SYSTEM_PROCESSOR} MATCHES "i.86" )
  set( BUILD_ARCH "i386" )
else()
  set( BUILD_ARCH ${CMAKE_SYSTEM_PROCESSOR} )
endif()

######################
# Define Build Files #
######################

set( SHAREDLIST
  ${MOUNT_DIR}/engine/qcommon/q_shared.cpp
  ${MOUNT_DIR}/engine/qcommon/q_math.cpp
)

set( OPENEXRLIST
  ${MOUNT_DIR}/libs/openexr/half.cpp
)

set( RENDERERLIST
  ${MOUNT_DIR}/engine/renderer/tr_animation.c
  ${MOUNT_DIR}/engine/renderer/tr_animation_mdm.c
  ${MOUNT_DIR}/engine/renderer/tr_animation_mds.c
  ${MOUNT_DIR}/engine/renderer/tr_backend.c
  ${MOUNT_DIR}/engine/renderer/tr_bsp.c
  ${MOUNT_DIR}/engine/renderer/tr_cmds.c
  ${MOUNT_DIR}/engine/renderer/tr_cmesh.c
  ${MOUNT_DIR}/engine/renderer/tr_curve.c
  ${MOUNT_DIR}/engine/renderer/tr_decals.c
  ${MOUNT_DIR}/engine/renderer/tr_flares.c
  ${MOUNT_DIR}/engine/renderer/tr_font.c
  ${MOUNT_DIR}/engine/renderer/tr_image.c
  ${MOUNT_DIR}/engine/renderer/tr_image_webp.c
  ${MOUNT_DIR}/engine/renderer/tr_init.c
  ${MOUNT_DIR}/engine/renderer/tr_light.c
  ${MOUNT_DIR}/engine/renderer/tr_main.c
  ${MOUNT_DIR}/engine/renderer/tr_marks.c
  ${MOUNT_DIR}/engine/renderer/tr_mesh.c
  ${MOUNT_DIR}/engine/renderer/tr_model.c
  ${MOUNT_DIR}/engine/renderer/tr_model_md5.c
  ${MOUNT_DIR}/engine/renderer/tr_noise.c
  ${MOUNT_DIR}/engine/renderer/tr_scene.c
  ${MOUNT_DIR}/engine/renderer/tr_shade.c
  ${MOUNT_DIR}/engine/renderer/tr_shade_calc.c
  ${MOUNT_DIR}/engine/renderer/tr_shader.c
  ${MOUNT_DIR}/engine/renderer/tr_shadows.c
  ${MOUNT_DIR}/engine/renderer/tr_skin.c
  ${MOUNT_DIR}/engine/renderer/tr_sky.c
  ${MOUNT_DIR}/engine/renderer/tr_surface.c
  ${MOUNT_DIR}/engine/renderer/tr_world.c
)

set( RENDERERGLLIST
  ${MOUNT_DIR}/engine/rendererGL/gl_shader.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_animation_mdm.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_animation.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_backend.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_bsp.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_cmds.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_curve.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_decals.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_fbo.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_flares.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_fog.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_font.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image_dds.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image_exr.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image_jpg.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image_png.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image_tga.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_image_webp.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_init.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_light.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_main.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_marks.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_mesh.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model_md3.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model_md5.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model_mdc.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model_mdm.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model_psk.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_model_skel.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_noise.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_scene.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_shade.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_shade_calc.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_shader.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_shadows.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_skin.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_sky.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_surface.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_vbo.cpp
  ${MOUNT_DIR}/engine/rendererGL/tr_world.cpp
)

set( SERVERLIST
  ${MOUNT_DIR}/engine/server/sv_bot.cpp
  ${MOUNT_DIR}/engine/server/sv_ccmds.cpp
  ${MOUNT_DIR}/engine/server/sv_client.cpp
  ${MOUNT_DIR}/engine/server/sv_game.cpp
  ${MOUNT_DIR}/engine/server/sv_init.cpp
  ${MOUNT_DIR}/engine/server/sv_main.cpp
  ${MOUNT_DIR}/engine/server/sv_net_chan.cpp
  ${MOUNT_DIR}/engine/server/sv_snapshot.cpp
  ${MOUNT_DIR}/engine/server/sv_world.cpp
)

set( COLLISIONMODEL
  ${MOUNT_DIR}/engine/cm/CollisionModel_contacts.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_contents.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_debug.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_files.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_load.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_q3BSP.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_rotate.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_trace.cpp
  ${MOUNT_DIR}/engine/cm/CollisionModel_translate.cpp
)

set( QCOMMONLIST
  ${MOUNT_DIR}/engine/asm/ftola.c
  ${MOUNT_DIR}/engine/asm/snapvector.c
  ${MOUNT_DIR}/engine/qcommon/cm_api.cpp
  ${MOUNT_DIR}/engine/qcommon/cm_load.c
  ${MOUNT_DIR}/engine/qcommon/cm_load.cpp
  ${MOUNT_DIR}/engine/qcommon/cm_trisoup.cpp
  ${MOUNT_DIR}/engine/qcommon/cm_patch.cpp
  ${MOUNT_DIR}/engine/qcommon/cm_polylib.cpp
  ${MOUNT_DIR}/engine/qcommon/cm_test.cpp
  ${MOUNT_DIR}/engine/qcommon/cm_trace.cpp
  ${MOUNT_DIR}/engine/qcommon/cmd.cpp
  ${MOUNT_DIR}/engine/qcommon/common.cpp
  ${MOUNT_DIR}/engine/qcommon/crypto.cpp
  ${MOUNT_DIR}/engine/qcommon/cvar.cpp
  ${MOUNT_DIR}/engine/qcommon/files.cpp
  ${MOUNT_DIR}/engine/qcommon/htable.cpp
  ${MOUNT_DIR}/engine/qcommon/huffman.cpp
  ${MOUNT_DIR}/engine/qcommon/md4.cpp
  ${MOUNT_DIR}/engine/qcommon/md5.cpp
  ${MOUNT_DIR}/engine/qcommon/msg.cpp
  ${MOUNT_DIR}/engine/qcommon/net_chan.cpp
  ${MOUNT_DIR}/engine/qcommon/net_ip.cpp
  ${MOUNT_DIR}/engine/qcommon/net_http.cpp
  ${MOUNT_DIR}/engine/qcommon/parse.cpp
  ${MOUNT_DIR}/engine/qcommon/vm.cpp
)

set( FRAMEWORKLIST
  ${MOUNT_DIR}/engine/framework/Unzip.c
  ${MOUNT_DIR}/engine/framework/ioapi.c
)

if( USE_PHYSICS )
  set( QCOMMONLIST ${QCOMMONLIST} ${MOUNT_DIR}/engine/qcommon/cm_physics.cpp )
endif()

if(USE_OPENSSL)
  find_package(OpenSSL REQUIRED)
  include_directories(${OPENSSL_INCLUDE_DIR})
  add_definitions( -DUSE_OPENSSL )
endif()

if( USE_MYSQL )
  set( DATABASELIST
    ${MOUNT_DIR}/engine/database/db_main.cpp
    ${MOUNT_DIR}/engine/database/db_mysql.cpp
  )
endif()

set( CLIENTLIST
  ${MOUNT_DIR}/engine/client/cin_ogm.cpp
  ${MOUNT_DIR}/engine/client/cl_avi.cpp
  ${MOUNT_DIR}/engine/client/cl_cgame.cpp
  ${MOUNT_DIR}/engine/client/cl_cin.cpp
  ${MOUNT_DIR}/engine/client/cl_console.cpp
  ${MOUNT_DIR}/engine/client/cl_input.cpp
  ${MOUNT_DIR}/engine/client/cl_irc.cpp
  ${MOUNT_DIR}/engine/client/cl_main.cpp
  ${MOUNT_DIR}/engine/client/cl_net_chan.cpp
  ${MOUNT_DIR}/engine/client/cl_parse.cpp
  ${MOUNT_DIR}/engine/client/cl_scrn.cpp
  ${MOUNT_DIR}/engine/client/cl_ui.cpp
  ${MOUNT_DIR}/engine/framework/KeyInput.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_adpcm.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_codec.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_codec_ogg.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_codec_wav.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_dma.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_openal.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_main.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_mem.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_mix.cpp
  ${MOUNT_DIR}/engine/snd_system/snd_wavelet.cpp
  ${MOUNT_DIR}/engine/snd_system/qal.cpp
)

if( USE_MUMBLE )
  set( CLIENTLIST ${CLIENTLIST} ${MOUNT_DIR}/engine/client/libmumblelink.cpp )
endif()

if( USE_CPUINFO )
  set( CPUINFOLIST
    ${MOUNT_DIR}/libs/cpuinfo/CPUInfo.c
  )
  add_definitions( -DUSE_CPUINFO )
endif()

if( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
  set( SDLBASELIST
    ${MOUNT_DIR}/engine/sys/sys_unix.cpp
    ${MOUNT_DIR}/engine/sys/sys_osx.m
    ${MOUNT_DIR}/engine/sys/sys_main.cpp
    ${MOUNT_DIR}/engine/sys/con_log.cpp
    ${MOUNT_DIR}/engine/sys/con_${CONSOLE}.cpp
  )
else()
  set( SDLBASELIST
    ${MOUNT_DIR}/engine/sys/sys_${PLATFORM}.cpp
    ${MOUNT_DIR}/engine/sys/sys_main.cpp
    ${MOUNT_DIR}/engine/sys/con_log.cpp
    ${MOUNT_DIR}/engine/sys/con_${CONSOLE}.cpp
  )
endif()

if( USE_CURSES )
  set( SDLBASELIST ${SDLBASELIST} ${MOUNT_DIR}/engine/sys/con_curses.cpp )
endif()

set( SDLLIST
  ${MOUNT_DIR}/engine/sys/sdl_input.cpp
  ${MOUNT_DIR}/engine/sys/sdl_snd.cpp
)

set( BOTLIBLIST
  ${MOUNT_DIR}/engine/botlib/l_struct.cpp
  ${MOUNT_DIR}/engine/botlib/l_crc.cpp
  ${MOUNT_DIR}/engine/botlib/l_libvar.cpp
  ${MOUNT_DIR}/engine/botlib/l_log.cpp
  ${MOUNT_DIR}/engine/botlib/l_memory.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_bspq3.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_cluster.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_debug.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_entity.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_file.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_main.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_move.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_optimize.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_reach.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_route.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_routealt.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_routetable.cpp
  ${MOUNT_DIR}/engine/botlib/be_aas_sample.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_char.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_chat.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_gen.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_goal.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_move.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_weap.cpp
  ${MOUNT_DIR}/engine/botlib/be_ai_weight.cpp
  ${MOUNT_DIR}/engine/botlib/be_ea.cpp
  ${MOUNT_DIR}/engine/botlib/be_interface.cpp
)


set( IDLIBLIST
  ${MOUNT_DIR}/engine/idLib/math/Angles.cpp
  ${MOUNT_DIR}/engine/idLib/math/Simd.cpp
  ${MOUNT_DIR}/engine/idLib/Base64.cpp
  ${MOUNT_DIR}/engine/idLib/BitMsg.cpp
  ${MOUNT_DIR}/engine/idLib/bv/Bounds.cpp
  ${MOUNT_DIR}/engine/idLib/bv/Box.cpp
  ${MOUNT_DIR}/engine/idLib/CmdArgs.cpp
  ${MOUNT_DIR}/engine/idLib/math/Complex.cpp
  ${MOUNT_DIR}/engine/idLib/hashing/CRC32.cpp
  ${MOUNT_DIR}/engine/idLib/Dict.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/DrawVert.cpp
  ${MOUNT_DIR}/engine/idLib/bv/Frustum.cpp
  ${MOUNT_DIR}/engine/idLib/containers/HashIndex.cpp
  ${MOUNT_DIR}/engine/idLib/Heap.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/JointTransform.cpp
  ${MOUNT_DIR}/engine/idLib/LangDict.cpp
  ${MOUNT_DIR}/engine/idLib/math/Lcp.cpp
  ${MOUNT_DIR}/engine/idLib/Lexer.cpp
  ${MOUNT_DIR}/engine/idLib/Lib.cpp
  ${MOUNT_DIR}/engine/idLib/MapFile.cpp
  ${MOUNT_DIR}/engine/idLib/math/Math.cpp
  ${MOUNT_DIR}/engine/idLib/math/Matrix.cpp
  ${MOUNT_DIR}/engine/idLib/hashing/MD4.cpp
  ${MOUNT_DIR}/engine/idLib/hashing/MD5.cpp
  ${MOUNT_DIR}/engine/idLib/math/Math.cpp
  ${MOUNT_DIR}/engine/idLib/math/Ode.cpp
  ${MOUNT_DIR}/engine/idLib/Parser.cpp
  ${MOUNT_DIR}/engine/idLib/math/Plane.cpp
  ${MOUNT_DIR}/engine/idLib/math/Pluecker.cpp
  ${MOUNT_DIR}/engine/idLib/math/Polynomial.cpp
  ${MOUNT_DIR}/engine/idLib/precompiled.cpp
  ${MOUNT_DIR}/engine/idLib/math/Quat.cpp
  ${MOUNT_DIR}/engine/idLib/math/Rotation.cpp
  ${MOUNT_DIR}/engine/idLib/bv/Sphere.cpp
  ${MOUNT_DIR}/engine/idLib/Str.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/Surface.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/Surface_Patch.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/Surface_Polytope.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/Surface_SweptSpline.cpp
  ${MOUNT_DIR}/engine/idLib/Sys_stubs.cpp
  ${MOUNT_DIR}/engine/idLib/Timer.cpp
  ${MOUNT_DIR}/engine/idLib/Token.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/TraceModel.cpp
  ${MOUNT_DIR}/engine/idLib/math/Vector.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/Winding2D.cpp
  ${MOUNT_DIR}/engine/idLib/geometry/Winding.cpp
)

set( QAGAMELIST
  ${GAME_DIR}/src/game/bg_animation.c
  ${GAME_DIR}/src/game/bg_animgroup.c
  ${GAME_DIR}/src/game/bg_campaign.c
  ${GAME_DIR}/src/game/bg_character.c
  ${GAME_DIR}/src/game/bg_classes.c
  ${GAME_DIR}/src/game/bg_misc.c
  ${GAME_DIR}/src/game/bg_pmove.c
  ${GAME_DIR}/src/game/bg_slidemove.c
  ${GAME_DIR}/src/game/bg_sscript.c
  ${GAME_DIR}/src/game/bg_stats.c
  ${GAME_DIR}/src/game/bg_tracemap.c
  ${GAME_DIR}/src/game/g_active.c
  ${GAME_DIR}/src/game/g_admin.c
  ${GAME_DIR}/src/game/g_alarm.c
  ${GAME_DIR}/src/game/g_antilag.c
  ${GAME_DIR}/src/game/g_buddy_list.c
  ${GAME_DIR}/src/game/g_character.c
  ${GAME_DIR}/src/game/g_client.c
  ${GAME_DIR}/src/game/g_cmds.c
  ${GAME_DIR}/src/game/g_cmds_ext.c
  ${GAME_DIR}/src/game/g_combat.c
  ${GAME_DIR}/src/game/g_config.c
  ${GAME_DIR}/src/game/g_fireteams.c
  ${GAME_DIR}/src/game/g_items.c
  ${GAME_DIR}/src/game/g_main.c
  ${GAME_DIR}/src/game/g_match.c
  ${GAME_DIR}/src/game/g_mem.c
  ${GAME_DIR}/src/game/g_misc.c
  ${GAME_DIR}/src/game/g_missile.c
  ${GAME_DIR}/src/game/g_mover.c
  ${GAME_DIR}/src/game/g_multiview.c
  ${GAME_DIR}/src/game/g_props.c
  ${GAME_DIR}/src/game/g_referee.c
  ${GAME_DIR}/src/game/g_script.c
  ${GAME_DIR}/src/game/g_script_actions.c
  ${GAME_DIR}/src/game/g_session.c
  ${GAME_DIR}/src/game/g_spawn.c
  ${GAME_DIR}/src/game/g_stats.c
  ${GAME_DIR}/src/game/g_svcmds.c
  ${GAME_DIR}/src/game/g_api.c
  ${GAME_DIR}/src/game/g_systemmsg.c
  ${GAME_DIR}/src/game/g_target.c
  ${GAME_DIR}/src/game/g_team.c
  ${GAME_DIR}/src/game/g_teammapdata.c
  ${GAME_DIR}/src/game/g_trigger.c
  ${GAME_DIR}/src/game/g_utils.c
  ${GAME_DIR}/src/game/g_vote.c
  ${GAME_DIR}/src/game/g_weapon.c
  ${MOUNT_DIR}/engine/qcommon/q_math.c
  ${MOUNT_DIR}/engine/qcommon/q_shared.c
)

set( CGAMELIST
  ${GAME_DIR}/src/cgame/cg_main.c
  ${GAME_DIR}/src/game/bg_animation.c
  ${GAME_DIR}/src/game/bg_animgroup.c
  ${GAME_DIR}/src/game/bg_character.c
  ${GAME_DIR}/src/game/bg_classes.c
  ${GAME_DIR}/src/game/bg_misc.c
  ${GAME_DIR}/src/game/bg_pmove.c
  ${GAME_DIR}/src/game/bg_slidemove.c
  ${GAME_DIR}/src/game/bg_sscript.c
  ${GAME_DIR}/src/game/bg_stats.c
  ${GAME_DIR}/src/game/bg_tracemap.c
  ${GAME_DIR}/src/cgame/cg_atmospheric.c
  ${GAME_DIR}/src/cgame/cg_character.c
  ${GAME_DIR}/src/cgame/cg_commandmap.c
  ${GAME_DIR}/src/cgame/cg_consolecmds.c
  ${GAME_DIR}/src/cgame/cg_debriefing.c
  ${GAME_DIR}/src/cgame/cg_draw.c
  ${GAME_DIR}/src/cgame/cg_drawtools.c
  ${GAME_DIR}/src/cgame/cg_effects.c
  ${GAME_DIR}/src/cgame/cg_ents.c
  ${GAME_DIR}/src/cgame/cg_event.c
  ${GAME_DIR}/src/cgame/cg_fireteamoverlay.c
  ${GAME_DIR}/src/cgame/cg_fireteams.c
  ${GAME_DIR}/src/cgame/cg_flamethrower.c
  ${GAME_DIR}/src/cgame/cg_info.c
  ${GAME_DIR}/src/cgame/cg_limbopanel.c
  ${GAME_DIR}/src/cgame/cg_loadpanel.c
  ${GAME_DIR}/src/cgame/cg_localents.c
  ${GAME_DIR}/src/cgame/cg_marks.c
  ${GAME_DIR}/src/cgame/cg_missionbriefing.c
  ${GAME_DIR}/src/cgame/cg_multiview.c
  ${GAME_DIR}/src/cgame/cg_newDraw.c
  ${GAME_DIR}/src/cgame/cg_particles.c
  ${GAME_DIR}/src/cgame/cg_players.c
  ${GAME_DIR}/src/cgame/cg_playerstate.c
  ${GAME_DIR}/src/cgame/cg_polybus.c
  ${GAME_DIR}/src/cgame/cg_popupmessages.c
  ${GAME_DIR}/src/cgame/cg_predict.c
  ${GAME_DIR}/src/cgame/cg_scoreboard.c
  ${GAME_DIR}/src/cgame/cg_servercmds.c
  ${GAME_DIR}/src/cgame/cg_snapshot.c
  ${GAME_DIR}/src/cgame/cg_sound.c
  ${GAME_DIR}/src/cgame/cg_spawn.c
  ${GAME_DIR}/src/cgame/cg_statsranksmedals.c
  ${GAME_DIR}/src/cgame/cg_api.c
  ${GAME_DIR}/src/cgame/cg_trails.c
  ${GAME_DIR}/src/cgame/cg_view.c
  ${GAME_DIR}/src/cgame/cg_weapons.c
  ${GAME_DIR}/src/cgame/cg_window.c
  ${GAME_DIR}/src/ui/ui_shared.c
  ${MOUNT_DIR}/engine/qcommon/q_math.c
  ${MOUNT_DIR}/engine/qcommon/q_shared.c
)

set( OMNIBOTLIST
  ${GAME_DIR}/omnibot/common/BotLoadLibrary.cpp
  ${GAME_DIR}/omnibot/et/g_etbot_interface.cpp
)

set( UILIST
  ${GAME_DIR}/src/ui/ui_atoms.c
  ${GAME_DIR}/src/ui/ui_gameinfo.c
  ${GAME_DIR}/src/ui/ui_loadpanel.c
  ${GAME_DIR}/src/ui/ui_main.c
  ${GAME_DIR}/src/ui/ui_players.c
  ${GAME_DIR}/src/ui/ui_shared.c
  ${GAME_DIR}/src/ui/ui_api.c
  ${GAME_DIR}/src/ui/ui_util.c
  ${GAME_DIR}/src/game/bg_campaign.c
  ${GAME_DIR}/src/game/bg_classes.c
  ${GAME_DIR}/src/game/bg_misc.c
  ${MOUNT_DIR}/engine/qcommon/q_math.c
  ${MOUNT_DIR}/engine/qcommon/q_shared.c
)

set( QAGAMELISTBASE
  ${BASE_DIR}/game/bg_misc.cpp
  ${BASE_DIR}/game/bg_pmove.cpp
  ${BASE_DIR}/game/bg_slidemove.cpp
  ${BASE_DIR}/game/g_active.cpp
  ${BASE_DIR}/game/g_client.cpp
  ${BASE_DIR}/game/g_cmds.cpp
  ${BASE_DIR}/game/g_combat.cpp
  ${BASE_DIR}/game/g_maprotation.cpp
  ${BASE_DIR}/game/g_mem.cpp
  ${BASE_DIR}/game/g_main.cpp
  ${BASE_DIR}/game/g_misc.cpp
  ${BASE_DIR}/game/g_missile.cpp
  ${BASE_DIR}/game/g_mover.cpp
  ${BASE_DIR}/game/g_ptr.cpp
  ${BASE_DIR}/game/g_spawn.cpp
  ${BASE_DIR}/game/g_svcmds.cpp
  ${BASE_DIR}/game/g_api.cpp
  ${BASE_DIR}/game/g_target.cpp
  ${BASE_DIR}/game/g_trigger.cpp
  ${BASE_DIR}/game/g_team.cpp
  ${BASE_DIR}/game/g_utils.cpp
  ${BASE_DIR}/game/g_buildable.cpp
  ${BASE_DIR}/game/g_weapon.cpp
  ${MOUNT_DIR}/engine/qcommon/q_math.cpp
  ${MOUNT_DIR}/engine/qcommon/q_shared.cpp
)

set( CGAMELISTBASE
  ${BASE_DIR}/cgame/cg_main.cpp
  ${BASE_DIR}/game/bg_misc.cpp
  ${BASE_DIR}/game/bg_pmove.cpp
  ${BASE_DIR}/game/bg_slidemove.cpp
  ${BASE_DIR}/cgame/cg_consolecmds.cpp
  ${BASE_DIR}/cgame/cg_buildable.cpp
  ${BASE_DIR}/cgame/cg_animation.cpp
  ${BASE_DIR}/cgame/cg_animmapobj.cpp
  ${BASE_DIR}/cgame/cg_draw.cpp
  ${BASE_DIR}/cgame/cg_drawtools.cpp
  ${BASE_DIR}/cgame/cg_ents.cpp
  ${BASE_DIR}/cgame/cg_event.cpp
  ${BASE_DIR}/cgame/cg_marks.cpp
  ${BASE_DIR}/cgame/cg_players.cpp
  ${BASE_DIR}/cgame/cg_playerstate.cpp
  ${BASE_DIR}/cgame/cg_predict.cpp
  ${BASE_DIR}/cgame/cg_servercmds.cpp
  ${BASE_DIR}/cgame/cg_snapshot.cpp
  ${BASE_DIR}/cgame/cg_view.cpp
  ${BASE_DIR}/cgame/cg_weapons.cpp
  ${BASE_DIR}/cgame/cg_scanner.cpp
  ${BASE_DIR}/cgame/cg_attachment.cpp
  ${BASE_DIR}/cgame/cg_trails.cpp
  ${BASE_DIR}/cgame/cg_particles.cpp
  ${BASE_DIR}/cgame/cg_tutorial.cpp
  ${BASE_DIR}/ui/ui_shared.cpp
  ${MOUNT_DIR}/engine/qcommon/q_math.cpp
  ${MOUNT_DIR}/engine/qcommon/q_shared.cpp
)

set( UILISTBASE
  ${BASE_DIR}/ui/ui_atoms.cpp
  ${BASE_DIR}/ui/ui_gameinfo.cpp
  ${BASE_DIR}/ui/ui_main.cpp
  ${BASE_DIR}/ui/ui_players.cpp
  ${BASE_DIR}/ui/ui_shared.cpp
  ${BASE_DIR}/ui/ui_api.cpp
  ${BASE_DIR}/game/bg_misc.cpp
  ${MOUNT_DIR}/engine/qcommon/q_math.cpp
  ${MOUNT_DIR}/engine/qcommon/q_shared.cpp
)

set( OWMAPLIST
  ${MOUNT_DIR}/tools/common/cmdlib.c
  ${MOUNT_DIR}/tools/common/imagelib.c
  ${MOUNT_DIR}/tools/common/inout.c
  ${MOUNT_DIR}/tools/common/mathlib.c
  ${MOUNT_DIR}/tools/common/md4.c
  ${MOUNT_DIR}/tools/common/mutex.c
  ${MOUNT_DIR}/tools/common/polylib.c
  ${MOUNT_DIR}/tools/common/scriplib.c
  ${MOUNT_DIR}/tools/common/threads.c
  ${MOUNT_DIR}/tools/common/unzip.c
  ${MOUNT_DIR}/tools/common/vfs.c
  ${MOUNT_DIR}/tools/common/ddslib.c
  ${MOUNT_DIR}/libs/picomodel/picointernal.c
  ${MOUNT_DIR}/libs/picomodel/picomodel.c
  ${MOUNT_DIR}/libs/picomodel/picomodules.c
  ${MOUNT_DIR}/libs/picomodel/pm_3ds.c
  ${MOUNT_DIR}/libs/picomodel/pm_ase.c
  ${MOUNT_DIR}/libs/picomodel/pm_fm.c
  ${MOUNT_DIR}/libs/picomodel/pm_lwo.c
  ${MOUNT_DIR}/libs/picomodel/pm_md2.c
  ${MOUNT_DIR}/libs/picomodel/pm_md3.c
  ${MOUNT_DIR}/libs/picomodel/pm_mdc.c
  ${MOUNT_DIR}/libs/picomodel/pm_ms3d.c
  ${MOUNT_DIR}/libs/picomodel/pm_obj.c
  ${MOUNT_DIR}/libs/picomodel/pm_terrain.c
  ${MOUNT_DIR}/libs/picomodel/lwo/clip.c
  ${MOUNT_DIR}/libs/picomodel/lwo/envelope.c
  ${MOUNT_DIR}/libs/picomodel/lwo/list.c
  ${MOUNT_DIR}/libs/picomodel/lwo/lwio.c
  ${MOUNT_DIR}/libs/picomodel/lwo/lwo2.c
  ${MOUNT_DIR}/libs/picomodel/lwo/lwob.c
  ${MOUNT_DIR}/libs/picomodel/lwo/pntspols.c
  ${MOUNT_DIR}/libs/picomodel/lwo/surface.c
  ${MOUNT_DIR}/libs/picomodel/lwo/vecmath.c
  ${MOUNT_DIR}/libs/picomodel/lwo/vmap.c
  ${MOUNT_DIR}/tools/owmap/brush.c
  ${MOUNT_DIR}/tools/owmap/fog.c
  ${MOUNT_DIR}/tools/owmap/brush_primit.c
  ${MOUNT_DIR}/tools/owmap/bsp.c
  ${MOUNT_DIR}/tools/owmap/bspfile_abstract.c
  ${MOUNT_DIR}/tools/owmap/bspfile_ibsp.c
  ${MOUNT_DIR}/tools/owmap/bspfile_rbsp.c
  ${MOUNT_DIR}/tools/owmap/bspfile_xbsp.c
  ${MOUNT_DIR}/tools/owmap/convert_ase.c
  ${MOUNT_DIR}/tools/owmap/convert_map.c
  ${MOUNT_DIR}/tools/owmap/decals.c
  ${MOUNT_DIR}/tools/owmap/facebsp.c
  ${MOUNT_DIR}/tools/owmap/gldraw.c
  ${MOUNT_DIR}/tools/owmap/model.c
  ${MOUNT_DIR}/tools/owmap/image.c
  ${MOUNT_DIR}/tools/owmap/leakfile.c
  ${MOUNT_DIR}/tools/owmap/light.c
  ${MOUNT_DIR}/tools/owmap/light_bounce.c
  ${MOUNT_DIR}/tools/owmap/light_trace.c
  ${MOUNT_DIR}/tools/owmap/light_ydnar.c
  ${MOUNT_DIR}/tools/owmap/lightmaps_ydnar.c
  ${MOUNT_DIR}/tools/owmap/main.c
  ${MOUNT_DIR}/tools/owmap/map.c
  ${MOUNT_DIR}/tools/owmap/mesh.c
  ${MOUNT_DIR}/tools/owmap/patch.c
  ${MOUNT_DIR}/tools/owmap/prtfile.c
  ${MOUNT_DIR}/tools/owmap/path_init.c
  ${MOUNT_DIR}/tools/owmap/portals.c
  ${MOUNT_DIR}/tools/owmap/shaders.c
  ${MOUNT_DIR}/tools/owmap/writebsp.c
  ${MOUNT_DIR}/tools/owmap/surface_abstract.c
  ${MOUNT_DIR}/tools/owmap/surface_extra.c
  ${MOUNT_DIR}/tools/owmap/surface_foliage.c
  ${MOUNT_DIR}/tools/owmap/surface_fur.c
  ${MOUNT_DIR}/tools/owmap/surface_meta.c
  ${MOUNT_DIR}/tools/owmap/tjunction.c
  ${MOUNT_DIR}/tools/owmap/tree.c
  ${MOUNT_DIR}/tools/owmap/vis.c
  ${MOUNT_DIR}/tools/owmap/visflow.c
  ${MOUNT_DIR}/libs/zlib/adler32.c
  ${MOUNT_DIR}/libs/zlib/compress.c
  ${MOUNT_DIR}/libs/zlib/crc32.c
  ${MOUNT_DIR}/libs/zlib/deflate.c
  ${MOUNT_DIR}/libs/zlib/gzio.c
  ${MOUNT_DIR}/libs/zlib/infback.c
  ${MOUNT_DIR}/libs/zlib/inffast.c
  ${MOUNT_DIR}/libs/zlib/inflate.c
  ${MOUNT_DIR}/libs/zlib/inftrees.c
  ${MOUNT_DIR}/libs/zlib/ioapi.c
  ${MOUNT_DIR}/libs/zlib/trees.c
  ${MOUNT_DIR}/libs/zlib/uncompr.c
  ${MOUNT_DIR}/libs/zlib/zutil.c
)

if( USE_VOIP AND USE_INTERNAL_SPEEX )
    set( SPEEXLIST
    ${MOUNT_DIR}/libs/libspeex/libspeex/bits.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/buffer.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/cb_search.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/exc_10_16_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/exc_10_32_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/exc_20_32_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/exc_5_256_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/exc_5_64_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/exc_8_128_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/fftwrap.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/filterbank.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/filters.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/gain_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/gain_table_lbr.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/hexc_10_32_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/hexc_table.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/high_lsp_tables.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/jitter.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/kiss_fft.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/kiss_fftr.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/lpc.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/lsp.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/lsp_tables_nb.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/ltp.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/mdf.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/modes.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/modes_wb.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/nb_celp.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/preprocess.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/quant_lsp.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/resample.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/sb_celp.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/smallft.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/speex.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/speex_callbacks.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/speex_header.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/stereo.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/vbr.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/vq.c
    ${MOUNT_DIR}/libs/libspeex/libspeex/window.c
  )
endif()

if( USE_INTERNAL_CRYPTO )
  set( CRYPTOLIST
    ${MOUNT_DIR}/libs/nettle/nettle/bignum.c
    ${MOUNT_DIR}/libs/nettle/nettle/bignum-random.c
    ${MOUNT_DIR}/libs/nettle/nettle/buffer-init.c
    ${MOUNT_DIR}/libs/nettle/nettle/nettle-buffer.c
    ${MOUNT_DIR}/libs/nettle/nettle/nettle-internal.c
    ${MOUNT_DIR}/libs/nettle/nettle/rsa2sexp.c
    ${MOUNT_DIR}/libs/nettle/nettle/rsa.c
    ${MOUNT_DIR}/libs/nettle/nettle/rsa-decrypt.c
    ${MOUNT_DIR}/libs/nettle/nettle/rsa-encrypt.c
    ${MOUNT_DIR}/libs/nettle/nettle/rsa-keygen.c
    ${MOUNT_DIR}/libs/nettle/nettle/rsa-sign.c
    ${MOUNT_DIR}/libs/nettle/nettle/sexp2bignum.c
    ${MOUNT_DIR}/libs/nettle/nettle/sexp2rsa.c
    ${MOUNT_DIR}/libs/nettle/nettle/sexp.c
    ${MOUNT_DIR}/libs/nettle/nettle/sexp-format.c
  )
endif()

####################
# End of file list #
####################

if( USE_PHYSICS )
  set( NEWTON_INCLUDES
    ${MOUNT_DIR}/libs/libnewton/include
    ${MOUNT_DIR}/libs/libnewton/include/dAnimation
    ${MOUNT_DIR}/libs/libnewton/include/dContainers
    ${MOUNT_DIR}/libs/libnewton/include/dCustomJoints
    ${MOUNT_DIR}/libs/libnewton/include/dMath
  )
endif()

if( USE_PHYSICS )
  if( LINUX )
    if( CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64" )
      set( NEWTON_LIBRARY CACHE FILEPATH "${LIB_DIR}/libnewton/libs/linux64/libNewton.a" )
    elseif( ${CMAKE_SYSTEM_PROCESSOR} MATCHES "i386" )
      set( NEWTON_LIBRARY CACHE FILEPATH "${LIB_DIR}/libnewton/libs/linux32/libNewton.a" )
    endif()
  else()
    set( NEWTON_LIBRARY CACHE FILEPATH "Location of the Newton library" )
  endif()
endif()

if( WIN32 )
  add_definitions( -DWINVER=0x501 )
  #set( OS_LIBRARIES m winmm wsock32 gdi32 ole32 ws2_32 psapi Iphlpapi advapi32 shell32 user32 )
  set( OS_LIBRARIES m winmm ws2_32 psapi libz )
  set( EXTRALIBS dinput dsound )
elseif( UNIX )
  if( CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" )
    set( OS_LIBRARIES m z )
  elseif( CMAKE_SYSTEM_NAME STREQUAL "Darwin" )
    set( OS_LIBRARIES dl m z )
    # FIXME This looks wrong.
    set( OS_LIBRARIES ${OS_LIBRARIES} "-framework AGL -framework OpenGL -framework Carbon -framework IOKit" )
  else()
    set( OS_LIBRARIES ${CMAKE_DL_LIBS} m z rt )
  endif()
endif()

if( NO_UNTRUSTED_PLUGINS )
  add_definitions( -DNO_UNTRUSTED_PLUGINS )
endif()

###############################
# Build Game/Cgame/Ui DLL/.so #
###############################

if( BUILD_GAME_SO_ET )
  add_library( game SHARED ${SHAREDLIST} ${QAGAMELIST} )
  set_property( TARGET game PROPERTY COMPILE_DEFINITIONS GAME GAMEDLL USE_REFENTITY_ANIMATIONSYSTEM )
  set_target_properties( game PROPERTIES
    OUTPUT_NAME "qagame.mp.${BUILD_ARCH}"
    PREFIX ""
    LIBRARY_OUTPUT_DIRECTORY "etmain"
  )
  target_link_libraries( game -lm )
  add_library( cgame SHARED ${SHAREDLIST} ${CGAMELIST} )
  set_property( TARGET cgame PROPERTY COMPILE_DEFINITIONS CGAME CGAMEDLL USE_REFENTITY_ANIMATIONSYSTEM )
  set_target_properties( cgame PROPERTIES
    OUTPUT_NAME "cgame.mp.${BUILD_ARCH}"
    PREFIX ""
    LIBRARY_OUTPUT_DIRECTORY "etmain"
  )
  target_link_libraries( cgame -lm )
  add_library( ui SHARED ${SHAREDLIST} ${UILIST} )
  set_property( TARGET ui PROPERTY COMPILE_DEFINITIONS UI UIDLL USE_REFENTITY_ANIMATIONSYSTEM )
  set_target_properties( ui PROPERTIES
    OUTPUT_NAME "ui.mp.${BUILD_ARCH}"
    PREFIX ""
    LIBRARY_OUTPUT_DIRECTORY "etmain"
  )
  target_link_libraries( ui -lm )
  install( TARGETS game cgame ui
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )
endif()

###############################
# Build Game/Cgame/Ui DLL/.so #
###############################

if( BUILD_GAME_SO_BASE )
  add_library( game SHARED ${SHAREDLIST} ${QAGAMELISTBASE} )
  set_property( TARGET game PROPERTY COMPILE_DEFINITIONS GAME GAMEDLL USE_REFENTITY_ANIMATIONSYSTEM )
  set_target_properties( game PROPERTIES
    OUTPUT_NAME "qagame.mp.${BUILD_ARCH}"
    PREFIX ""
    LIBRARY_OUTPUT_DIRECTORY "base"
  )
  target_link_libraries( game -lm )
  add_library( cgame SHARED ${SHAREDLIST} ${CGAMELISTBASE} )
  set_property( TARGET cgame PROPERTY COMPILE_DEFINITIONS CGAME CGAMEDLL USE_REFENTITY_ANIMATIONSYSTEM )
  set_target_properties( cgame PROPERTIES
    OUTPUT_NAME "cgame.mp.${BUILD_ARCH}"
    PREFIX ""
    LIBRARY_OUTPUT_DIRECTORY "base"
  )
  target_link_libraries( cgame -lm )
  add_library( ui SHARED ${SHAREDLIST} ${UILISTBASE} )
  set_property( TARGET ui PROPERTY COMPILE_DEFINITIONS UI UIDLL USE_REFENTITY_ANIMATIONSYSTEM )
  set_target_properties( ui PROPERTIES
    OUTPUT_NAME "ui.mp.${BUILD_ARCH}"
    PREFIX ""
    LIBRARY_OUTPUT_DIRECTORY "base"
  )
  target_link_libraries( ui -lm )
  install( TARGETS game cgame ui
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )
endif()

###################
# Build Renderers #
###################

if( USE_WEBP )
  find_package( WebP REQUIRED )
endif()

if( BUILD_OLD_RENDERER OR BUILD_NEW_RENDERER )
  find_package( OpenGL REQUIRED )
  find_package( SDL REQUIRED )
  find_package( JPEG REQUIRED )
  find_package( PNG REQUIRED )
  find_package( Freetype REQUIRED )
  find_package( GLEW REQUIRED )
  if( USE_GLSL_OPTIMIZER AND BUILD_NEW_RENDERER )
    include_directories( ${LIB_DIR}/glsl-optimizer/include )
    include_directories( ${LIB_DIR}/glsl-optimizer/src/mesa )
    include_directories( ${LIB_DIR}/glsl-optimizer/src/mapi )
    include_directories( ${LIB_DIR}/glsl-optimizer/src/glsl )
    file(GLOB glcpp-library_sources ${LIB_DIR}/glsl-optimizer/src/glsl/glcpp/*.c)
    file(GLOB glcpp-library_sources_remove ${LIB_DIR}/glsl-optimizer/src/glsl/glcpp/glcpp.c)
    list(REMOVE_ITEM glcpp-library_sources ${glcpp-library_sources_remove})
    set_source_files_properties( ${glcpp-library_sources} PROPERTIES COMPILE_FLAGS "-fPIC" )
    add_library(glcpp-library ${glcpp-library_sources})

    file(GLOB mesa_sources ${LIB_DIR}/glsl-optimizer/src/mesa/program/*.c)
    set_source_files_properties( ${mesa_sources} PROPERTIES COMPILE_FLAGS "-fPIC" )
    add_library(mesa ${mesa_sources})

    file(GLOB glsl_sources ${LIB_DIR}/glsl-optimizer/src/glsl/*.cpp ${LIB_DIR}/glsl-optimizer/src/glsl/*.c)
    file(GLOB glsl_sources_remove ${LIB_DIR}/glsl-optimizer/src/glsl/main.cpp ${LIB_DIR}/glsl-optimizer/src/glsl/builtin_stubs.cpp)
    list(REMOVE_ITEM glsl_sources ${glsl_sources_remove})
    set_source_files_properties( ${glsl_sources} PROPERTIES COMPILE_FLAGS "-fPIC" )
    add_library(glsl_optimizer ${glsl_sources})
    target_link_libraries(glsl_optimizer glcpp-library mesa)
  endif()
  if( BUILD_NEW_RENDERER )
    add_library( rendererGL SHARED ${SHAREDLIST} ${OPENEXRLIST} ${RENDERERGLLIST} ${MOUNT_DIR}/engine/sys/sdl_glimp.cpp ${MOUNT_DIR}/engine/sys/sdl_gamma.cpp )
    include_directories( ${PNG_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR} ${JPEG_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIRS} ${GLEW_INCLUDE_DIR} ${SDL_INCLUDE_DIR} )
    set_property( TARGET rendererGL PROPERTY COMPILE_DEFINITIONS BUILD_FREETYPE FT_FREETYPE USE_XREAL_RENDERER  USE_REFENTITY_ANIMATIONSYSTEM )
    if( USE_GLSL_OPTIMIZER )
      include_directories( ${LIB_DIR}/glsl-optimizer/include )
      target_link_libraries( rendererGL glsl_optimizer )
      set_property( TARGET rendererGL APPEND PROPERTY COMPILE_DEFINITIONS USE_GLSL_OPTIMIZER )
    endif()
    target_link_libraries( rendererGL ${OS_LIBRARIES} ${PNG_LIBRARIES} ${GLEW_LIBRARY} ${OPENGL_LIBRARIES} ${JPEG_LIBRARIES} ${FREETYPE_LIBRARIES} ${SDL_LIBRARY} )
    if( WIN32 )
      set_target_properties( rendererGL PROPERTIES OUTPUT_NAME "rendererGL3${BUILD_ARCH}" PREFIX "" )
    else()
      set_target_properties( rendererGL PROPERTIES OUTPUT_NAME "librendererGL3${BUILD_ARCH}" PREFIX "" )
      target_link_libraries( rendererGL -lm )
    endif()
    if( WEBP_FOUND )
      set_property( TARGET rendererGL APPEND PROPERTY COMPILE_DEFINITIONS USE_WEBP )
      include_directories( ${WEBP_INCLUDE_DIRS} )
      target_link_libraries( rendererGL ${WEBP_LIBRARIES} )
    endif()
  endif()

  if( BUILD_OLD_RENDERER )
    add_library( renderer SHARED ${RENDERERLIST} ${MOUNT_DIR}/engine/sys/sdl_glimp.cpp ${MOUNT_DIR}/engine/sys/sdl_gamma.cpp ${SHAREDLIST} )  
    include_directories( ${PNG_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR} ${JPEG_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIRS} ${GLEW_INCLUDE_DIR} ${SDL_INCLUDE_DIR} )
    set_property( TARGET renderer PROPERTY COMPILE_DEFINITIONS BUILD_FREETYPE USE_REFENTITY_ANIMATIONSYSTEM )
    target_link_libraries( renderer ${PNG_LIBRARY} ${SDL_LIBRARY} ${GLEW_LIBRARY} ${OPENGL_LIBRARY} ${JPEG_LIBRARY} ${FREETYPE_LIBRARY} )
    if( WIN32 )
      set_target_properties( renderer PROPERTIES OUTPUT_NAME "rendererGL${BUILD_ARCH}" PREFIX "" )
    else()
      set_target_properties( renderer PROPERTIES OUTPUT_NAME "librendererGL${BUILD_ARCH}" PREFIX "" )
      target_link_libraries( renderer -lm )
    endif()
    if( WEBP_FOUND )
      set_property( TARGET renderer APPEND PROPERTY COMPILE_DEFINITIONS USE_WEBP )
      include_directories( ${WEBP_INCLUDE_DIR} )
      target_link_libraries( renderer ${WEBP_LIBRARY} )
    endif()
  endif()
endif()

################
# Build Client #
################

if( BUILD_CLIENT )
  # Setup target client
  add_executable( client ${SERVERLIST} ${CLIENTLIST} ${SDLBASELIST}
    ${CPUINFOLIST} ${SDLLIST} ${QCOMMONLIST} ${FRAMEWORKLIST} ${COLLISIONMODEL} ${SHAREDLIST} ${CRYPTOLIST}
    ${DATABASELIST} ${BOTLIBLIST} ${IDLIBLIST} ${MOUNT_DIR}/engine/qcommon/dl_main_curl.cpp ${SPEEXLIST} )
  add_dependencies( client rendererGL )
  include_directories( ${MOUNT_DIR}/libs/cpuinfo ${NEWTON_INCLUDES} )
  target_link_libraries( client ${OS_LIBRARIES} ${NEWTON_LIBRARY} )
  set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_XREAL_RENDERER BOTLIB BOTLIB_STATIC COMPAT_ET USE_REFENTITY_ANIMATIONSYSTEM USE_CRYPTO )
  set_target_properties( client PROPERTIES OUTPUT_NAME "OpenWolf.${BUILD_ARCH}" PREFIX "" LINKER_LANGUAGE CXX )
  install( TARGETS client
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )

  # This section finds and provides REQUIRED dependencies to target client
  find_package( OpenGL REQUIRED )
  find_package( SDL REQUIRED )
  find_package( Freetype REQUIRED )
  find_package( GLEW REQUIRED )
  find_package( GMP REQUIRED )
  find_package( ZLIB REQUIRED )
  find_package( CURL REQUIRED )

  if( USE_INTERNAL_CRYPTO )
    # BEFORE is required to prevent system headers from being used
    include_directories( BEFORE ${MOUNT_DIR}/libs/nettle )
  else()
    find_package( Nettle REQUIRED )
    include_directories( ${NETTLE_INCLUDE_DIRS} )
    target_link_libraries( client ${NETTLE_LIBRARIES} )
  endif()

    include_directories( ${OPENGL_INCLUDE_DIR} ${SDL_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIRS} ${GLEW_INCLUDE_DIR} ${GMP_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS} ${CURL_INCLUDE_DIRS} )
    target_link_libraries( client ${OPENGL_LIBRARIES} ${SDL_LIBRARY} ${FREETYPE_LIBRARIES} ${GLEW_LIBRARY} ${GMP_LIBRARIES} ${ZLIB_LIBRARIES} ${CURL_LIBRARIES} )

  if( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
    link_directories( /opt/local/lib )
  endif()

  # This section finds and provides OPTIONAL dependencies to target client
  if( USE_OPENAL )
    find_package( OpenAL REQUIRED )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_OPENAL )
    if( USE_OPENAL_DLOPEN )
      set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_OPENAL_DLOPEN )
    endif()
  endif()

  if( USE_CURSES )
    set( CURSES_NEED_NCURSES 1 ) # Tells FindCurses that ncurses is required
    find_package( Curses REQUIRED )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_CURSES )
    include_directories( ${CURSES_INCLUDE_DIR} )
    target_link_libraries( client ${CURSES_LIBRARIES} )
  endif()

  if( USE_VOIP )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_VOIP FLOATING_POINT )
    if( USE_INTERNAL_SPEEX )
      # BEFORE is required to prevent system headers being used
      include_directories( BEFORE ${MOUNT_DIR}/libs/libspeex/include )
    else()
      find_package( Speex REQUIRED )
      include_directories( ${SPEEX_INCLUDE_DIRS} )
      target_link_libraries( client ${SPEEX_LIBRARIES} )
    endif()
  endif()

  if( USE_CODEC_VORBIS )
    find_package( Vorbis REQUIRED )
    find_package( Ogg REQUIRED )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_CODEC_VORBIS )
    include_directories( ${VORBIS_INCLUDE_DIRS} ${OGG_INCLUDE_DIRS} )
    target_link_libraries( client ${VORBIS_LIBRARIES} ${OGG_LIBRARIES} )
  endif()

  if( USE_CIN_THEORA )
    find_package( Theora REQUIRED )
    if( USE_CODEC_VORBIS ) # Ogg (and by extension Vorbis) must be enabled to use Theora
      set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_CIN_THEORA )
      include_directories( ${THEORA_INCLUDE_DIRS} )
      target_link_libraries( client ${THEORA_LIBRARIES} )
    else()
      message( FATAL_ERROR "Vorbis must be enabled to use CIN_THEORA" )
    endif()
  endif()

  if( USE_MUMBLE )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_MUMBLE )
  endif()

  if( USE_PHYSICS )
    find_package( TinyXML REQUIRED )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_PHYSICS )
    add_dependencies( client newton )
    include_directories( ${TINYXML_INCLUDE_DIR} )
    target_link_libraries( client ${TINYXML_LIBRARY} ${NEWTON_LIBRARY} )
  endif()

  if( USE_MYSQL )
    find_package( MySQL REQUIRED )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS ET_MYSQL )
    include_directories( ${MYSQL_INCLUDE_DIR} )
    target_link_libraries( client ${MYSQL_LIBRARIES} )
  endif()

  if( USE_CIN_XVID )
    find_package( xvid REQUIRED )
    set_property( TARGET client APPEND PROPERTY COMPILE_DEFINITIONS USE_CIN_XVID )
    include_directories( ${XVID_INCLUDE_DIR} )
    target_link_libraries( client ${XVID_LIBRARY} )
  endif()
endif()

################
# Build Server #
################

if( BUILD_SERVER )
  # Setup the target Server
  add_executable( server ${SERVERLIST} ${SDLBASELIST} ${CPUINFOLIST} ${BOTLIBLIST}
    ${QCOMMONLIST} ${FRAMEWORKLIST} ${IDLIBLIST} ${SHAREDLIST} ${DATABASELIST} ${CRYPTOLIST} ${COLLISIONMODEL}
    ${MOUNT_DIR}/engine/null/null_client.cpp
    ${MOUNT_DIR}/engine/null/null_input.cpp ${MOUNT_DIR}/engine/null/null_snddma.cpp
    ${MOUNT_DIR}/engine/qcommon/dl_main_stubs.cpp )
  include_directories( ${MOUNT_DIR}/libs/cpuinfo ${NEWTON_INCLUDES} )
  target_link_libraries( server ${OS_LIBRARIES} ${NEWTON_LIBRARY} )
  set_property( TARGET server APPEND PROPERTY COMPILE_DEFINITIONS BOTLIB BOTLIB_STATIC DEDICATED COMPAT_ET USE_CRYPTO )
  set_target_properties( server PROPERTIES OUTPUT_NAME "OpenWolfded.${BUILD_ARCH}" PREFIX "" LINKER_LANGUAGE CXX )
  install( TARGETS server
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )
  # The following section finds the REQUIRED dependencies and makes them available to the target
    find_package( SDL REQUIRED )
    find_package( GMP REQUIRED )
    find_package( ZLIB REQUIRED )
    find_package( CURL REQUIRED )

    if( USE_INTERNAL_CRYPTO )
      # BEFORE is required to prevent system headers from being used
      include_directories( BEFORE ${MOUNT_DIR}/libs/nettle )
    else()
      find_package( Nettle REQUIRED )
      include_directories( ${NETTLE_INCLUDE_DIRS} )
      target_link_libraries( server ${NETTLE_LIBRARIES} )
    endif()

    include_directories( ${SDL_INCLUDE_DIR} ${GMP_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS} ${CURL_INCLUDE_DIRS} )
    target_link_libraries( server ${SDL_LIBRARY} ${GMP_LIBRARIES} ${ZLIB_LIBRARIES} ${CURL_LIBRARIES} )
  # The following section finds the OPTIONAL dependencies and makes them available to the target
  if( USE_MYSQL )
    find_package( MySQL REQUIRED )
    set_property( TARGET server APPEND PROPERTY COMPILE_DEFINITIONS ET_MYSQL )
    target_link_libraries( server ${MYSQL_LIBRARIES} )
  endif()

  if( USE_CURSES )
    set( CURSES_NEED_NCURSES 1 ) # Tells FindCurses that ncurses is required
    find_package( Curses REQUIRED )
    set_property( TARGET server APPEND PROPERTY COMPILE_DEFINITIONS USE_CURSES )
    include_directories( ${CURSES_INCLUDE_DIR} )
    target_link_libraries( server ${CURSES_LIBRARIES} )
  endif()

  if( USE_VOIP )
    set_property( TARGET server APPEND PROPERTY COMPILE_DEFINITIONS USE_VOIP FLOATING_POINT )
  endif()

  if( USE_PHYSICS )
    find_package( TinyXML REQUIRED )
    set_property( TARGET server APPEND PROPERTY COMPILE_DEFINITIONS USE_PHYSICS )
    include_directories( ${TINYXML_INCLUDE_DIRS} )
    target_link_libraries( server ${TINYXML_LIBRARIES} )
  endif()
endif()

###########################
# Build Autoupdate Server #
###########################

if( BUILD_AUTOUPDATE_SERVER )
  # Setup the target Server
  add_executable( autoupdateserver ${SERVERLIST} ${SDLBASELIST} ${CPUINFOLIST} ${COLLISIONMODEL}
    ${QCOMMONLIST} ${FRAMEWORKLIST} ${IDLIBLIST} ${SHAREDLIST} ${DATABASELIST} ${CRYPTOLIST} ${BOTLIBLIST}
    ${MOUNT_DIR}/engine/null/null_client.cpp
    ${MOUNT_DIR}/engine/null/null_input.cpp ${MOUNT_DIR}/engine/null/null_snddma.cpp
    ${MOUNT_DIR}/engine/qcommon/dl_main_stubs.cpp )
  include_directories( ${MOUNT_DIR}/libs/cpuinfo ${NEWTON_INCLUDES} )
  target_link_libraries( autoupdateserver ${OS_LIBRARIES} )
  set_property( TARGET autoupdateserver APPEND PROPERTY COMPILE_DEFINITIONS DEDICATED COMPAT_ET BOTLIB BOTLIB_STATIC USE_CRYPTO UPDATE_SERVER )
  set_target_properties( autoupdateserver PROPERTIES OUTPUT_NAME "OpenWolfupdateded.${BUILD_ARCH}" PREFIX "" LINKER_LANGUAGE CXX )
  install( TARGETS autoupdateserver
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )
  # The following section finds the REQUIRED dependencies and makes them available to the target
    find_package( SDL REQUIRED )
    find_package( GMP REQUIRED )
    find_package( ZLIB REQUIRED )
    find_package( CURL REQUIRED )

    if( USE_INTERNAL_CRYPTO )
      # BEFORE is required to prevent system headers from being used
      include_directories( BEFORE ${MOUNT_DIR}/libs/nettle )
    else()
      find_package( Nettle REQUIRED )
      include_directories( ${NETTLE_INCLUDE_DIRS} )
      target_link_libraries( autoupdateserver ${NETTLE_LIBRARIES} )
    endif()

    include_directories( ${SDL_INCLUDE_DIR} ${GMP_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS} ${CURL_INCLUDE_DIRS} )
    target_link_libraries( autoupdateserver ${SDL_LIBRARY} ${GMP_LIBRARIES} ${ZLIB_LIBRARIES} ${CURL_LIBRARIES} )
  # The following section finds the OPTIONAL dependencies and makes them available to the target
  if( USE_MYSQL )
    find_package( MySQL REQUIRED )
    set_property( TARGET autoupdateserver APPEND PROPERTY COMPILE_DEFINITIONS ET_MYSQL )
    target_link_libraries( autoupdateserver ${MYSQL_LIBRARIES} )
  endif()

  if( USE_CURSES )
    set( CURSES_NEED_NCURSES 1 ) # Tells FindCurses that ncurses is required
    find_package( Curses REQUIRED )
    set_property( TARGET autoupdateserver APPEND PROPERTY COMPILE_DEFINITIONS USE_CURSES )
    include_directories( ${CURSES_INCLUDE_DIR} )
    target_link_libraries( autoupdateserver ${CURSES_LIBRARIES} )
  endif()

endif()

################
# Build OWMap  #
################
if( BUILD_OWMAP )
  # Setup OWMap target
  add_executable( owmap ${OWMAPLIST} )
  include_directories( ${LIB_DIR}/picomodel ${MOUNT_DIR}/tools/common )
  target_link_libraries( owmap ${OS_LIBRARIES} )
  set_property( TARGET owmap APPEND PROPERTY COMPILE_DEFINITIONS USE_OPENGL )
  set_target_properties( owmap PROPERTIES OUTPUT_NAME "owmap.${BUILD_ARCH}" PREFIX "" )
  install( TARGETS owmap
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )
  # This section finds and provides REQUIRED dependencies to OWMap target
  find_package( OpenGL REQUIRED )
  find_package( SDL REQUIRED )
  find_package( JPEG REQUIRED )
  find_package( PNG REQUIRED )
  find_package( ZLIB REQUIRED )
  target_link_libraries( owmap ${OPENGL_LIBRARIES} ${SDL_LIBRARY} ${JPEG_LIBRARIES} ${PNG_LIBRARIES} ${ZLIB_LIBRARIES} )
  include_directories( ${OPENGL_INCLUDE_DIR} ${JPEG_INCLUDE_DIR} ${PNG_INCLUDE_DIR} ${SDL_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS} )

  # FIXME - GLIB needs to be converted to a find module
  pkg_check_modules( GLIB glib-2.0 )
  if( GLIB_FOUND )
    include_directories( ${GLIB_INCLUDE_DIRS} )
    target_link_libraries( owmap ${GLIB_LIBRARIES} )
  else()
    message( FATAL_ERROR "Glib not found" )
  endif()
endif()

